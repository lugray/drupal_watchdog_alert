<?php

/**
 * @file
 * Implement hooks for the Database Logging Alert module
 */

/**
 * Implements hook_cron().
 *
 * Controls the size of the alerts table, removing entries which are no longer
 * needed.
 */
function watchdog_alert_cron() {
  module_load_include('admin.inc', 'watchdog_alert');
  _watchdog_alert_remove_expired();
  _watchdog_alert_remove_no_access();
  _watchdog_alert_remove_over_limit();
}

/**
 * Implements hook_page_build().
 *
 * Creates the necessary calls to drupal_set_message().  This hook is used (and
 * not hook_init()) to ensure this takes place after any alert dismissal, and
 * after any redirects which avoids duplicate messages.
 */
function watchdog_alert_page_build(&$page) {
  if (user_access('access site reports')) {
    module_load_include('admin.inc', 'watchdog_alert');
    global $user;
    $alerts = watchdog_alert_get_alerts($user->uid);

    foreach ($alerts as $alert) {
      if ($alert->auto_dismiss) {
        $alert_message = t('Database Logging Alert: !message', array(
          '!message' => theme('watchdog_alert_message', array('alert' => $alert)),
        ));
        _watchdog_alert_dismiss($alert, $dblog->wid);
      }
      else {
        $dismiss_path = 'admin/config/development/watchdog_alert/'
            . $alert->aid . '/dismiss';
        $dismiss_options = array(
          'query' => array('destination' => current_path()),
        );
        $dismiss_link = l(t('Dismiss'), $dismiss_path, $dismiss_options);
        $alert_message = t('[!dismiss] Database Logging Alert: !message', array(
          '!message' => theme('watchdog_alert_message', array('alert' => $alert)),
          '!dismiss' => $dismiss_link,
        ));
      }
      $type = _watchdog_alert_severity_to_type($dblog->severity);
      drupal_set_message($alert_message, $type);
    }
  }
}

/**
 * Implements hook_theme().
 */
function watchdog_alert_theme() {
  return array(
    'watchdog_alert_message' => array(
      'variables' => array('alert' => Null),
      'file' => 'watchdog_alert.admin.inc',
    )
  );
}

/**
 * Implements hook_watchdog().
 *
 * Add watchdog events matching an alert profile to the database.
 */
function watchdog_alert_watchdog($log_entry) {
  //!variable_get('watchdog_alert_exclude_user_1', FALSE)
}

/**
 * Implements hook_menu().
 */
function watchdog_alert_menu() {
  return array(
    'admin/config/development/watchdog_alert' => array(
      'title' => 'Log Message Alert Profiles',
      'description' => 'Create alerts for certain kinds of logged messages.',
      'page callback' => '_watchdog_alert_profiles',
      'access arguments' => array('administer site configuration'),
      'file' => 'watchdog_alert.admin.inc',
    ),
    'admin/config/development/watchdog_alert/new' => array(
      'title' => 'Create New Alert Profile',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_watchdog_alert_edit_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'watchdog_alert.admin.inc',
    ),
    'admin/config/development/watchdog_alert/%/edit' => array(
      'title' => 'Edit Alert Profile',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_watchdog_alert_edit_form', 4),
      'access arguments' => array('administer site configuration'),
      'file' => 'watchdog_alert.admin.inc',
    ),
    'admin/config/development/watchdog_alert/%/delete' => array(
      'title' => 'Delete Alert Profile',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_watchdog_alert_delete_form', 4),
      'access arguments' => array('administer site configuration'),
      'file' => 'watchdog_alert.admin.inc',
    ),
    'admin/config/development/watchdog_alert/%/dismiss' => array(
      'title' => 'Dismiss Alert',
      'page callback' => '_watchdog_alert_dismiss_page',
      'page arguments' => array(4),
      'access arguments' => array('access site reports'),
      'file' => 'watchdog_alert.admin.inc',
    ),
  );
}

/**
 * Implements hook_watchdog_alert_types().
 */
function watchdog_alert_watchdog_alert_types() {
  try {
    $types = _dblog_get_message_types();
  }
  catch (Exception $ex) {
    $types = array();
  }
  $types[] = 'watchdog_alert';
  return $types;
}

function watchdog_alert_get_types() {
  return db_select('watchdog_alert_type', 't')
          ->fields('t')
          ->execute()
          ->fetchAllKeyed();
}

function watchdog_alerts_add_type($type) {
  db_merge('watchdog_alert_type')
      ->key(array('type' => $type))
      ->insertFields(array('type' => $type))
      ->execute();
}
